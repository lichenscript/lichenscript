/**
 * Copyright (c) 2022 Vincent Chan
 */

@external("lc_std_print")
public declare function print(...content: any[]);

@external("lc_std_exit")
public declare function exit(exitCode: i32);

@external("lc_std_panic")
public declare function panic(...content: any[]): any;

@external("lc_std_get_args")
public declare function getArgs(): string[];

@builtin()
public class Object {

    virtual toString(): string {
        return "Object";
    }

}

@builtin()
public class Array<T> {

    @external("lc_std_array_push")
    declare push(item: T);

    @external("lc_std_array_resize")
    declare resize(newLen: i32, item: T);

    @external("lc_std_array_sort")
    declare sort(cmp: (a: T, b: T) => i32);

    @external("lc_std_array_slice")
    declare slice(begin: i32, end: i32): T[];

    @external("lc_std_array_map")
    declare map<V>(f: (element: T) => V): V[];

    @external("lc_std_array_filter")
    declare filter(f: (element: T) => boolean): T[];

    @external("lc_std_array_get_length")
    declare get length(): i32;

}

@builtin()
public class Char {

    @external("lc_std_char_code")
    declare code(): i32;

    @external("lc_std_char_to_string")
    declare toString(): string;

}

@builtin()
public class String {

    @external("lc_std_string_get_length")
    declare get length(): i32;

    @external("lc_std_string_slice")
    declare slice(begin: i32, end: i32): string;

}

@meta_id("LC_STD_CLS_ID_OPTION")
public enum Option<A> {
    case Some(A)
    case None

    public isSome(): boolean {
        match this {
            case Some(_) => true
            case _ => false
        }
    }

    public isNone(): boolean {
        match this {
            case None => true
            case Some(_) => false
        }
    }

}

@meta_id("LC_STD_CLS_ID_RESULT")
public enum Result<A, B> {
    case Ok(A)
    case Error(B)
}

@builtin()
public class Map<K, V> {

    @external("lc_std_map_set")
    declare set(key: K, value: V);

    @external("lc_std_map_get")
    declare get(key: K): Option<V>;

    @external("lc_std_map_remove")
    declare delete(key: K): Option<V>;

    @external("lc_std_map_size")
    declare get size(): i32;

}
